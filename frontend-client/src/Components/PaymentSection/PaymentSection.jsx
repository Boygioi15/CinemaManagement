import React, { useEffect, useState } from "react";
import CustomButton from "../button/index"; // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ CustomButton component
import { createPayment, getCurrentPro } from "../../config/api"; // ƒê·∫£m b·∫£o createPayment ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë√∫ng
import { useAuth } from "../../Context/AuthContext"; // D√πng context cho user

const PaymentSection = ({
  selectedFood,
  selectedPromotions,
  totalDiscount,
}) => {
  const [isLoading, setIsLoading] = useState(false); // State qu·∫£n l√Ω tr·∫°ng th√°i loading
  const [paymentUrl, setPaymentUrl] = useState(null); // State qu·∫£n l√Ω URL thanh to√°n
  const [pro, setPro] = useState(null);
  const totalPrice = selectedFood.reduce(
    (sum, food) => sum + food.quantity * food.price,
    0
  );

  const additionalItems = selectedFood.map((food) => {
    return {
      _id: food._id,
      quantity: food.quantity,
    };
  });
  console.log("üöÄ ~ additionalItems ~ additionalItems:", additionalItems);
  const handleGetPro = async () => {
    const response = await getCurrentPro(Date.now());
    setPro(response.data[0]);
  };
  useEffect(() => {
    handleGetPro();
  }, []);
  // L·∫•y danh s√°ch ID t·ª´ selectedPromotions
  const promotionIds = selectedPromotions.map((promo) => promo._id);
  // H√†m x·ª≠ l√Ω thanh to√°n
  const handleCreatePayment = async () => {
    setIsLoading(true); // B·∫≠t tr·∫°ng th√°i loading khi b·∫Øt ƒë·∫ßu g·ª≠i y√™u c·∫ßu
    try {
      if (!localStorage.getItem("accessToken")) {
        alert("BaÃ£n c√¢ÃÄn phaÃâi ƒëƒÉng nh√¢Ã£p tr∆∞∆°ÃÅc khi th∆∞Ã£c hi√™Ã£n thanh toaÃÅn");
        navigate("/auth");
      }
      const response = await createPayment({
        additionalItemSelections: additionalItems,
        totalPrice,
        promotionIDs: promotionIds,
      });

      if (response && response.payUrl) {
        setPaymentUrl(response.payUrl);
        window.location.href = response.payUrl;
      } else {
        alert("Ch∆∞a ch·ªçn s·∫£n ph·∫©m");
      }
    } catch (error) {
      console.error("L·ªói khi t·∫°o thanh to√°n:", error);
      alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsLoading(false); // T·∫Øt tr·∫°ng th√°i loading sau khi xong
    }
  };

  return (
    <>
      {additionalItems.length > 0 && (
        <div className="flex justify-between items-center px-24 bg-[#0f172a] text-white sticky bottom-0 py-4">
          {/* Ph·∫ßn H√≥a ƒë∆°n */}
          <div className="flex flex-col items-start max-w-xl w-full">
            <h1 className="text-3xl font-bold">H√ìA ƒê∆†N</h1>
            {selectedFood.map((food) => (
              <p
                style={{
                  display: "flex",
                  flexDirection: "row ",
                  gap: "5px",
                  fontSize: "18px",
                }}
                className="text-lg mt-2 break-words w-full"
                key={food._id}
              >
                <span style={{ color: "#F3EA28" }} className="text-gray-500">
                  {" "}
                  x{food.quantity}
                </span>
                <span className="block">{food.name}</span>
              </p>
            ))}
          </div>

          <div className="flex flex-col items-end max-w-md w-full border-l-2 pl-6 py-4">
            <div className="flex flex-col  w-full ">
              <p className="text-lg">T·∫°m t√≠nh</p>
              <p className="text-xl font-bold">
                {totalPrice.toLocaleString()} VNƒê
              </p>
              <p className="text-lg">Khuy·∫øn m√£i</p>
              <p className="text-xl font-bold">{+totalDiscount} %</p>
              <p className="text-lg">T·ªïng ti·ªÅn</p>
              <p className="text-xl font-bold">
                {(
                  totalPrice -
                  (totalPrice * +totalDiscount) / 100
                ).toLocaleString()}
                VNƒê
              </p>
            </div>

            <div className="w-full mt-2">
              <CustomButton
                defaultColor=""
                gradientFrom="#EE772E"
                gradientTo="#F6C343"
                textColor="#FFFFFF"
                hoverTextColor="#FFFFFF"
                borderColor="#FFFFFF"
                handleCreatePayment={handleCreatePayment} // Truy·ªÅn s·ª± ki·ªán v√†o button
                href="#"
                className="w-full h-[40px] text-lg mt-4"
                text={isLoading ? "ƒêang x·ª≠ l√Ω..." : "ƒê·∫∑t ngay"} // Hi·ªÉn th·ªã text thay ƒë·ªïi khi ƒëang x·ª≠ l√Ω
                disabled={isLoading} // V√¥ hi·ªáu h√≥a n√∫t khi ƒëang x·ª≠ l√Ω
              />
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default PaymentSection;
